// imports
@import "./reset";
@import "./variables";
@import "./maps";

/* Functions and mixins */
@function weight($weight-name) {
  @return map-get($font-weights, $weight-name);
}
@function sizes($size) {
  @return map-get($font-sizes, $size);
}

@mixin flexCenter($direction) {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: $direction;
}

@mixin theme($light-theme: true) {
  @if $light-theme {
    background-color: lighten($bg-color, 50%);
    color: darken($color, 100%);
  } @else {
    background-color: darken($bg-color, 50%);
    color: lighten($color, 100%);
  }
}

// Breakpoints mixin
@mixin media {
  @content;
}

$rainbow: $purple $cyan $green $yellow $orange $red;
@for $i from 1 through 6 {
  .rainbow p:nth-child(#{$i}) {
    @extend .message;
    background-color: nth($rainbow, $i) !important;
  }
}

body {
  @include flexCenter(column);
  background-color: $default-bg-color;
}

p {
  // This goes into p selector
  @include media {
    @media screen and (min-width: map-get($breakpoints, phone)) and (max-width: #{map-get($breakpoints,
  tablet)-1px}) {
      color: $purple;
      background-color: $pink;
      padding: 1em;
    }
  }
  @include media {
    @media screen and (min-width: map-get($breakpoints, tablet)) and (max-width: map-get($breakpoints,
  desktop)) {
      color: $dark;
      background-color: $yellow;
      padding: 1em;
    }
  }
}

.main {
  // width: 200px;
  // height: 200px;
  background-color: $green;
  h1 {
    /*font-size: map-get($font-sizes, x-large);*/
    font-size: sizes(x-large);
    background-color: $red;
    //color: #fff;
  }

  /* &-paragraph {
    color: #fff;
  }*/
  p + p {
    font-size: sizes(small);
    /*font-size: map-get($font-sizes, small);*/
    background-color: $blue;
  }
}

#header {
  background-color: $purple;
  padding: map-get($paddings, big);
  .navigation {
    //color: #fff;
    ul {
      @include flexCenter(row);
      list-style-type: none;
      li {
        margin: 0 0.3em;
      }
      & li.active {
        color: $pink;
        font-weight: weight(bold);
        /* font-weight: map-get($font-weights, bold); */
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
}

.light {
  @include theme($light-theme: false);
}

.message {
  padding: 0.8em 1.5em;
  border-radius: 1rem;
  width: 70%;
  margin: 1em auto;
}

.message-info {
  @extend .message;
  color: #fff;
  background-color: $blue;
}

.message-danger {
  @extend .message;
  color: #fff;
  background-color: $red;
}

// body .main .main-paragraph

// Nested elements
// body {
// background: $green;
// #main {
// width: 80%;
// margin: 2em auto;
// // Equal to .main-header
// & .main-header {
// font-size: sizes(x-large);
// transition: color 0.3s ease-in-out;
// &:hover {
// color: $dark;
// }
// }
// p {
// font-weight: weight(bold);
// color: $dark;
// font-size: sizes(large);
// }
// }
// }
